apply plugin: 'com.android.application'

dependencies {
    compile project(':Base')
    compile project(':View:StepIndicator')
    compile project(':Lib:Controller')

    compile androidLibDependencies.design

    compile libDependencies.butterknife
    //TODO: Investigate how to use libs, such as RxLifecycle, RxBinding, to help understand RxAndroid
    compile libDependencies.rxAndroid
    compile libDependencies.retrofit
    compile libDependencies.retrofitGson
    compile libDependencies.retrofitRx

    testCompile androidUnitTestDependencies.mockito
    testCompile androidUnitTestDependencies.junit
    testCompile("com.squareup.assertj:assertj-android:${TestVersion.assertAndroid}")
            { exclude group: "com.android.support", module: "support-annotations" }
    testCompile androidUnitTestDependencies.robolectric
    testCompile androidUnitTestDependencies.shadowMultidex
    testCompile androidUnitTestDependencies.shadowHttp
}

android {
    compileSdkVersion AndroidVersion.targetSDK
    buildToolsVersion AndroidVersion.buildTool

    defaultConfig {
        minSdkVersion AndroidVersion.minSDK
        targetSdkVersion AndroidVersion.targetSDK

        versionCode appVersionCode.toInteger()
        versionName appSemanticVersion

        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    productFlavors {
        dev {

        }

        production {

        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        applicationVariants.all { variant ->
            apply from: "config/" + variant.flavorName + '.gradle'

            buildConfigField "String", "HTTP_SERVER_HOST", "\"${HTTP_SERVER_HOST}\""
        }
    }
}