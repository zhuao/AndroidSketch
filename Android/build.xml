<?xml version="1.0" encoding="UTF-8"?>
<project name="AndroidSketch" >

		<property environment="env" />

    <property file="ant.properties" />

    <loadproperties srcFile="project.properties" />
	
	<property name="dropbox.dir" value="${env.DROPBOX_ROOT}" />
	
	<property name="sdk.dir" value="${env.ANDROID_SDK_ROOT}" />
	
	
	
    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />
	
	
    <import file="${sdk.dir}/tools/ant/build.xml" />
	
	<property name="APK_NAME" value="${ant.project.name}" />
	<property name="VERSION_NUMBER" value="1.0" />

	<target name="printinfo">
		<property environment="env" />
		<echo message="VERSION_NUMBER: ${VERSION_NUMBER}" />
		<echo message="${env.BUILD_NUMBER}" />
		<echo message="${out.absolute.dir}" />
		<echo message="${gen.absolute.dir}" />
		<echo message="SDK.DIR ==== ${sdk.dir}" />
		<echo message="${basedir}" />
	</target>
	
	
	<!-- Gets the latest SVN revision number
		 and updates the versionCode in the manifest file
		-->
	<target name="svn-revision">
		<!--
		Exec `svn info` to get the revision of the code being built.
		Note that the output of this command is in "name: value" format
		so we can pretend it's a java properties file.
		-->
		<exec executable="svn" output="svn-info.properties">
			<arg line="info"/>
		</exec>
		<property prefix="svn" file="svn-info.properties"/>
		<echo>Revision: ${svn.Revision}</echo>

		<!--
		Write the revision number into the Manifest as the last
		segment of the VersionName property
		-->
		<!--
		<replaceregexp file="AndroidManifest.xml"
			match='android:versionName="([^".]+\.[^".]+)(\.[^"]*)?"'
			replace='android:versionName="\1.${svn.Revision}"'
		/>	
		-->

		<replaceregexp file="AndroidManifest.xml"
			match='android:versionCode="([^"]*)"'
			replace='android:versionCode="${svn.Revision}"'
		/>				
		
		<!-- 
		Clean up
		-->
		<delete file="svn-info.properties"/>
	</target>
	
	<target name="build" depends="clean">
		<!--<copy file="${basedir}/config/mock-server/app_config.properties" todir="${basedir}/res/raw" overwrite="true" />-->
		<ant target="debug" />
	    <move file="${basedir}/bin/${APK_NAME}-debug.apk" tofile="${basedir}/bin/${APK_NAME}-${VERSION_NUMBER}.apk" />
	</target>

    <target name="install" depends="build">
        <exec executable="${env.ANDROID_HOME}/platform-tools/adb">
            <arg value="uninstall"/>
            <arg value="com.tw.sketch"/>
        </exec>
        <exec executable="${env.ANDROID_HOME}/platform-tools/adb">
            <arg value="install"/>
            <arg value="${basedir}/bin/${APK_NAME}-${VERSION_NUMBER}.apk"/>
        </exec>
        <exec executable="${env.ANDROID_HOME}/platform-tools/adb">
            <arg value="shell"/>
            <arg value="am"/>
            <arg value="start"/>
            <arg value="-n"/>
            <arg value="com.tw.sketch/.MainActivity"/>
        </exec>
    </target>
	

	<target name="release">
		<!-- For security, we DO NOT want an app_config.properties file in the RELESASE APK-->
		<!-- remove app_config.properties file, file may exist from a previous build task-->
		<delete file="${basedir}/res/raw/app_config.properties"/>
		<!-- release version does not use values from app_config.properties, but requires a file with that name to exist to compile -->
		<touch file="${basedir}/res/raw/app_config.properties" />
		<ant target="release" />
		<!-- Rename the package -->
		<move file="${basedir}/bin/${APK_NAME}-release.apk" tofile="${basedir}/bin/${APK_NAME}-${VERSION_NUMBER}.apk" />
		<!-- zip all proguard build-artefacts -->
		<ant target="archive-proguard-gen-files" />
	</target>

	<!-- zip all proguard generated build-artefacts -->
	<target name="archive-proguard-gen-files">
		<zip 	
			destfile="${basedir}/bin/proguard/proguard-${VERSION_NUMBER}.zip"
			basedir="${basedir}/bin/proguard"
			includes="*.txt"
		/>
	</target>
	
</project>
